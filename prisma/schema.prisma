// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "forest"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String         // Renamed from fullname
  email         String         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  is_admin      Boolean        @default(false)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  contributions Contribution[]
  createdEvents CalendarEvent[] @relation("CreatedEvents")
  eventAttendees CalendarEventAttendee[] @relation("EventAttendees")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contribution {
  id         Int       @id @default(autoincrement())
  user_id    Int
  amount     Decimal   @db.Decimal(10, 2)
  month      String
  year       Int
  status     Status    @default(PENDING)
  notes      String?   @db.Text
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([month])
  @@index([status])
}

enum Status {
  PENDING
  PAID
  MISSED
}

model CalendarEvent {
  id          Int                     @id @default(autoincrement())
  title       String
  description String?                 @db.Text
  start_time  DateTime
  end_time    DateTime
  location    String?
  created_by  Int
  created_at  DateTime                @default(now())
  updated_at  DateTime                @updatedAt
  creator     User                    @relation("CreatedEvents", fields: [created_by], references: [id], onDelete: Cascade)
  attendees   CalendarEventAttendee[]

  @@index([created_by])
  @@index([start_time])
  @@index([end_time])
}

model CalendarEventAttendee {
  id              Int           @id @default(autoincrement())
  event_id        Int
  user_id         Int
  status          AttendeeStatus @default(PENDING)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  event           CalendarEvent @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user            User          @relation("EventAttendees", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([event_id, user_id])
  @@index([event_id])
  @@index([user_id])
  @@index([status])
}

enum AttendeeStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
}
